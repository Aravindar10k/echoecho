import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

# Load data
file_path = '/content/credit_data_norm.csv'
data = pd.read_csv(file_path)

# Features and target
X = data.iloc[:, :-1].values  # Features (all columns except the last one)
y = data.iloc[:, -1].values   # Target (last column)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the data (scale features)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Define the neural network model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=["accuracy"])

# Train the model
model.fit(X_train, y_train, epochs=20, batch_size=32, verbose=2)

# Evaluate the model on the test data
test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=0)

# Display the test accuracy
print(f'Test accuracy: {test_accuracy * 100:.2f}%')

# Make predictions
y_pred = (model.predict(X_test) > 0.5).astype(int)  # Using 0.5 as the threshold for classification

# Calculate accuracy using the predicted values
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy on test data: {accuracy * 100:.2f}%')
